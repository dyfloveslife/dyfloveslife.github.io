<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Carol&#39;s blog</title>
    <link>http://localhost:1313/categories/Java/</link>
    <description>Recent content in Java on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Carol</copyright>
    <lastBuildDate>Tue, 12 May 2020 11:43:11 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式汇总</title>
      <link>http://localhost:1313/2020/05/12/Design-Patterns/</link>
      <pubDate>Tue, 12 May 2020 11:43:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/12/Design-Patterns/</guid>
      <description>&lt;p&gt;之前或多或少接触过几种设计模式，只不过没有好好的总结。本文用于记录自己在设计模式方面的学习过程，在学习期间阅读了有关设计模式的书籍，挑选了博客园中优秀的文章，搜集网上的资料并进行了筛选，也看过别人对设计模式的总结。只是单纯看的话，会容易忘记。因此，我一般喜欢“输出式学习”，将学过的知识与自己对知识的理解整理下来，构建一套属于自己的知识体系。即便以后忘记了，也会通过浏览对原有知识的总结，很快重新拾起这部分的知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 ReentrantLock</title>
      <link>http://localhost:1313/2020/05/07/Java-ReentrantLock/</link>
      <pubDate>Thu, 07 May 2020 15:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/07/Java-ReentrantLock/</guid>
      <description>&lt;p&gt;上篇文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/05/01/Java-AQS/&#34;&gt;《Java 中的 AQS》&lt;/a&gt; 对 AbstractQueuedSynchronizer 中的方法及实现方式做了详细的解释。有了 AQS 和 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/29/Java-Atomic/#cas&#34;&gt;CAS&lt;/a&gt; 的基础以后，我们再来分析 ReentrantLock 就会更加容易一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 AQS</title>
      <link>http://localhost:1313/2020/05/01/Java-AQS/</link>
      <pubDate>Fri, 01 May 2020 11:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/01/Java-AQS/</guid>
      <description>&lt;p&gt;之前的&lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Lock/&#34;&gt;《Java 中的 Lock 及各种锁的概念》&lt;/a&gt;简单介绍了 Lock 的使用以及 Lock 的唯一实现类 ReentrantLock 中的方法。我们一般会拿 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;synchronized&lt;/a&gt; 和 ReentrantLock 做比较。而在了解 ReentrantLock 之前需要理解 AQS 的实现。因此，本文分析了 AQS 中主要的源码，包括独占模式与共享模式，为更好的认识 ReentrantLock 打下基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Atomic 包</title>
      <link>http://localhost:1313/2020/04/29/Java-Atomic/</link>
      <pubDate>Wed, 29 Apr 2020 15:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/29/Java-Atomic/</guid>
      <description>&lt;p&gt;为了在多线程并发的情况下能够保证多个线程对数据进行合理的访问，避免出现并发情况下的线程安全问题，Java 从 JDK1.5 开始提供了 java.util.concurrent.atomic 包，它可以通过&lt;code&gt;原子操作类&lt;/code&gt;来对某个变量实现更加简单、线程安全的更新操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 CopyOnWrite 容器</title>
      <link>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</link>
      <pubDate>Mon, 27 Apr 2020 15:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</guid>
      <description>&lt;p&gt;在某些&lt;code&gt;读多写少&lt;/code&gt;的多线程环境下，基于 CopyOnWrite 思想的 CopyOnWriteArrayList 容器和 CopyOnWriteArraySet 容器可以保证线程安全，能够确保读操作和写操作之间不会被阻塞。本文将会从 线程不安全的 ArrayList 入手，由 CopyOnWrite 思想引申到 CopyOnWriteArrayList，通过示例说明它是怎么保证线程安全的，适用的场景，最后对其进行总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的并发工具类</title>
      <link>http://localhost:1313/2020/04/21/Java-Concurrent-Tool-Class/</link>
      <pubDate>Tue, 21 Apr 2020 18:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/21/Java-Concurrent-Tool-Class/</guid>
      <description>&lt;p&gt;在 JDK 1.5 中的 java.util.concurrent 包下，有一些在并发情况下控制线程的工具类，有的可以控制并发流程，而有的可以交换线程之间的数据。通过这些辅助类可以更好的帮助我们进行并发编程，而本文主要介绍 CountDownLatch、CyclicBarrier、Semaphore、Exchanger 这四个并发工具类。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的阻塞队列</title>
      <link>http://localhost:1313/2020/04/16/Java-BlockingQueue/</link>
      <pubDate>Thu, 16 Apr 2020 16:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/16/Java-BlockingQueue/</guid>
      <description>&lt;p&gt;在之前的《&lt;a href=&#34;https://dyfloveslife.github.io/2020/04/14/Java-ThreadPool/&#34;&gt;Java 中的线程池&lt;/a&gt;》一文中，在介绍线程池参数的时候，其中&lt;code&gt;BlockingQueue&amp;lt;Runnable&amp;gt; workQueue&lt;/code&gt;用于存储等待执行的任务，提到了几种不同类型的等待队列。本文将详细的介绍阻塞队列的实现原理以及各自的使用方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的线程池</title>
      <link>http://localhost:1313/2020/04/14/Java-ThreadPool/</link>
      <pubDate>Tue, 14 Apr 2020 13:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/14/Java-ThreadPool/</guid>
      <description>&lt;p&gt;在多线程并发的环境下创建多个线程去执行任务，每当有一个任务到来的时候都需要创建一个线程去执行。这种方式虽然是可行的，但如果线程并发的数量很多，并且每个线程都是执行一个时间很短的任务就结束掉了，这样频繁的创建线程就会大大降低系统的运行效率，因为频繁的创建和销毁线程需要消耗额外的时间。对于这种情况，我们可以使用线程池技术让线程达到复用的目的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 ThreadLocal</title>
      <link>http://localhost:1313/2020/04/13/Java-ThreadLocal/</link>
      <pubDate>Mon, 13 Apr 2020 15:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/13/Java-ThreadLocal/</guid>
      <description>&lt;p&gt;使用 Java 中的 ThreadLocal 类可以创建只能由同一个线程读写的变量。也就是说，即使两个线程在执行相同的代码，并且代码中都有对同一个 ThreadLocal 变量的引用，那么这两个线程也不会看到对方的 ThreadLocal 变量。因此，Java 中的 ThreadLocal 类提供了一种简单的方式来使代码中的线程变得更加安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程间的通信机制</title>
      <link>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</link>
      <pubDate>Tue, 07 Apr 2020 22:10:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</guid>
      <description>&lt;p&gt;之前的文章，比如在多线程环境中使用 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;synchronized&lt;/a&gt; 和 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Lock/&#34;&gt;Lock&lt;/a&gt; 可以通过锁的方式实现线程之间的同步互斥访问临界资源。也就是说，只有当一个线程释放了锁之后，另一个线程才能获得锁，从而对数据进行操作。但在有些情况下，需要多个线程之间进行协作，以使得多个线程可以一起去解决某个问题，此时就需要采用线程通信-协作机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Lock 及各种锁的概念</title>
      <link>http://localhost:1313/2020/04/05/Java-Lock/</link>
      <pubDate>Sun, 05 Apr 2020 18:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Lock/</guid>
      <description>&lt;p&gt;上节 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;《Java 中的 synchronized》&lt;/a&gt;介绍了能够在多线程访问临界资源的情况下，使用 synchronized 关键字可以保证线程之间的顺序执行（序列化访问临界资源），即同一时刻只能由一个线程获得当前对象的锁。可以看到 synchronized 是在 JVM 层面实现了对临界资源的同步互斥访问，但锁的粒度较大。本文将介绍并发包下的 Lock 接口，同样也可以实现锁的功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 synchronized</title>
      <link>http://localhost:1313/2020/04/05/Java-Synchronized/</link>
      <pubDate>Sun, 05 Apr 2020 14:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Synchronized/</guid>
      <description>&lt;p&gt;在多线程并发的情况下，多线程同时访问的资源叫做临界资源（如变量、对象、文件等），当多个线程同时访问对象并要求操作相同资源时，其操作可能存在数据不一致或数据不完整的情况。为了避免这种情况的发生，需要采取同步互斥机制，以确保在某一时刻，方法内只允许一个线程对该资源进行操作，而其它线程只能等待。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 ConcurrentHashMap</title>
      <link>http://localhost:1313/2020/03/24/JavaSrc-ConcurrentHashMap/</link>
      <pubDate>Tue, 24 Mar 2020 14:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/24/JavaSrc-ConcurrentHashMap/</guid>
      <description>&lt;p&gt;ConcurrentHashMap 是 HashMap 的一个线程安全并且支持高并发的版本，之前的文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/02/12/JavaSrc-HashMap/&#34;&gt;《Java 容器之 HashMap》&lt;/a&gt;从 HashMap 的实现原理到各个方法的使用，以及每个方法各自的具体实现都分别进行了介绍，并将 JDK1.7 与 JDK1.8 中的 HashMap 进行了对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的序列化和反序列化</title>
      <link>http://localhost:1313/2020/03/21/Serialization-and-Deserialization-in-Java/</link>
      <pubDate>Sat, 21 Mar 2020 17:04:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/21/Serialization-and-Deserialization-in-Java/</guid>
      <description>&lt;p&gt;当在 Java 中创建对象的时候，只要我们需要这个对象，它就会一直存在。但是一旦程序终止，它们也就不复存在了。如果我们想让对象能够在程序不运行的状态下仍然能够保存它们的信息，那就需要用到&lt;code&gt;序列化机制&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 final 和 static 关键字</title>
      <link>http://localhost:1313/2020/03/20/Java-final-static/</link>
      <pubDate>Fri, 20 Mar 2020 13:32:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/20/Java-final-static/</guid>
      <description>之前对关键字 final 和 static 的具体使用场景很是模糊，什么时候使用 final，什么时候使用 static，当使用它们的时候会产生什么效果。本文将对 final 和 static 进</description>
    </item>
    
    <item>
      <title>Java 中的 Thread</title>
      <link>http://localhost:1313/2020/03/17/JavaSrc-Thread/</link>
      <pubDate>Tue, 17 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/17/JavaSrc-Thread/</guid>
      <description>&lt;p&gt;本文主要介绍 Thread 类中线程的六种状态以及各状态之间转换的方法，如 wait()、start()、run()、sleep() 等。在阐述线程的生命周期的同时，解释各个方法是如何使线程的状态进行转换的，以及在转换的过程中是否需要释放锁等问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 volatile</title>
      <link>http://localhost:1313/2020/03/16/Java-volatile/</link>
      <pubDate>Mon, 16 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/16/Java-volatile/</guid>
      <description>&lt;p&gt;volatile 是轻量级的 synchronized，其在多处理器中保证了共享变量的&lt;code&gt;可见性&lt;/code&gt;，即当一个线程修改一个共享变量时，另一个线程会读到这个修改的值。但 volatile 不能保证&lt;code&gt;原子性&lt;/code&gt;（例如自增操作），详细的说明将会在下文进行展开。保证并发程序正确执行还需要做到&lt;code&gt;有序性&lt;/code&gt;，满足以上三个原则，才能够正确的执行并发程序。而本文将对 volatile 关键字进行详细解释，结合具体例子的同时说明 volatile 关键字的使用场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashTable</title>
      <link>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</link>
      <pubDate>Wed, 11 Mar 2020 19:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</guid>
      <description>&lt;p&gt;前文对 JDK1.8 中的 &lt;a href=&#34;https://dyfloveslife.github.io/2020/02/12/JavaSrc-HashMap/&#34;&gt;HashMap&lt;/a&gt; 的在原理实现以及相关操作进行了说明，介绍了基于&lt;code&gt;数组（Node）+链表（尾插）+红黑树&lt;/code&gt;的数据结构，以及&lt;code&gt;resize()&lt;/code&gt;的过程。而本文将介绍与 HashMap 较为相似的&lt;code&gt;HashTable&lt;/code&gt;，同样也是基于&lt;code&gt;数组（Entry）+链表&lt;/code&gt;实现的，但&lt;code&gt;HashTable&lt;/code&gt;是线程同步的（synchroinzed），在某些方面又有一些区别，下面将分别介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 LinkedHashMap</title>
      <link>http://localhost:1313/2020/03/10/JavaSrc-LinkedHashMap/</link>
      <pubDate>Tue, 10 Mar 2020 15:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/10/JavaSrc-LinkedHashMap/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 LinkedHashMap 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 LinkedList</title>
      <link>http://localhost:1313/2020/03/07/JavaSrc-LinkedList/</link>
      <pubDate>Sat, 07 Mar 2020 19:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/07/JavaSrc-LinkedList/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 LinkedList 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 ArrayList</title>
      <link>http://localhost:1313/2020/03/04/JavaSrc-ArrayList/</link>
      <pubDate>Wed, 04 Mar 2020 15:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/04/JavaSrc-ArrayList/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 ArrayList 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 单例模式[备忘]</title>
      <link>http://localhost:1313/2020/02/17/Singleton-pattern-in-java/</link>
      <pubDate>Mon, 17 Feb 2020 11:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/17/Singleton-pattern-in-java/</guid>
      <description>&lt;p&gt;很久没有复习单例模式了，今天做一个笔记，对 Java 中的单例模式做一个总结，以做备忘。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashMap</title>
      <link>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</link>
      <pubDate>Wed, 12 Feb 2020 17:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</guid>
      <description>&lt;p&gt;HapMap 中的 get 和 put 方法在 O(1) 的时间内即可完成，如此快速存取方式到底是怎么实现的？本文将对 HashMap 中的主要方法（get、put、resize）进行说明，对应的版本为 JDK 1.8。不过，为了更加详细的了解 HashMap 的优化过程，同时也会与 JDK 1.7 中的 HashMap 进行比较，从而对 HashMap 有一个较为全面的认识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的对象与引用</title>
      <link>http://localhost:1313/2020/02/01/java-object-and-reference/</link>
      <pubDate>Sat, 01 Feb 2020 19:00:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/01/java-object-and-reference/</guid>
      <description>&lt;p&gt;更好的理解 Java 中的 &lt;code&gt;对象&lt;/code&gt; 和 &lt;code&gt;引用&lt;/code&gt; 是面向对象技术的前提，本文旨在讨论如何理解它们的含义以及它们之间的关系。如有错误，还请指出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Exception 和 Error</title>
      <link>http://localhost:1313/2020/01/21/JavaCore-difference-between-exception-and-error/</link>
      <pubDate>Tue, 21 Jan 2020 11:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/01/21/JavaCore-difference-between-exception-and-error/</guid>
      <description>&lt;p&gt;程序的异常处理在开发中很是常见，只有正确处理好意外情况，才能保证程序的可靠性。本文通过 Java 异常处理机制，详细的分析与解释 Java 中的 Exception 与 Error 之间的区别以及需要注意的点，以便更好的实现程序的可维护性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何理解 Java?</title>
      <link>http://localhost:1313/2020/01/21/JavaCore-understand-java/</link>
      <pubDate>Tue, 21 Jan 2020 10:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/01/21/JavaCore-understand-java/</guid>
      <description>&lt;p&gt;“一次编译，到处执行” 又能体现 Java 的哪些思想？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之基础类 Integer</title>
      <link>http://localhost:1313/2019/12/13/JavaSrc-BasicClass-Integer/</link>
      <pubDate>Fri, 13 Dec 2019 21:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/13/JavaSrc-BasicClass-Integer/</guid>
      <description>&lt;p&gt;本片文章主要介绍 Integer 类中一些比较常用的方法，并分析该类在 Java 中的作用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再谈 String s1 = &#34;123&#34; 与 String s2 = new String(&#34;123&#34;)</title>
      <link>http://localhost:1313/2019/12/09/talk-with-String/</link>
      <pubDate>Mon, 09 Dec 2019 20:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/09/talk-with-String/</guid>
      <description>&lt;p&gt;之前在介绍 &lt;a href=&#34;https://dyfloveslife.github.io/2019/12/04/JavaSrc-BasicClass-Object/#equals&#34;&gt;JDK 源码之基础类 Object&lt;/a&gt; 中 &lt;code&gt;equals()&lt;/code&gt; 方法的时候，稍微提到了关于在声明一个 String 变量的时候，通过其内存地址或具体内容来比较两个变量是否相同。本篇文章是对之前文章的进一步理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之基础类 Object</title>
      <link>http://localhost:1313/2019/12/04/JavaSrc-BasicClass-Object/</link>
      <pubDate>Wed, 04 Dec 2019 18:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/04/JavaSrc-BasicClass-Object/</guid>
      <description>&lt;p&gt;主要介绍 Java 中 Object 类的常见方法，通过阅读源码的方式加深对各种方法的理解。如有错误，欢迎在评论中和我一起讨论交流。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 垃圾收集器与内存分配策略</title>
      <link>http://localhost:1313/2019/11/22/gc-and-memory-allocation-strategy/</link>
      <pubDate>Fri, 22 Nov 2019 08:55:16 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/22/gc-and-memory-allocation-strategy/</guid>
      <description>&lt;p&gt;上篇文章 &lt;a href=&#34;https://dyfloveslife.github.io/2019/11/20/object-survival-and-gc-algorithm/&#34;&gt;《JVM 对象存活和垃圾收集算法》&lt;/a&gt; 对 JVM 中的对象是否存活以及几种垃圾收集算法进行了说明，而本文将对内存回收的具体实现，即对 &lt;code&gt;垃圾收集器&lt;/code&gt; 进行归类与总结。同时，也将介绍一个对象是如何在堆内存中的不同区域进行分配的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 对象存活和垃圾收集算法</title>
      <link>http://localhost:1313/2019/11/20/object-survival-and-gc-algorithm/</link>
      <pubDate>Wed, 20 Nov 2019 20:56:16 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/20/object-survival-and-gc-algorithm/</guid>
      <description>&lt;p&gt;本文是对《深入理解 Java 虚拟机》中第 3 章前半部分的回顾与总结，这部分也是 JVM 的重点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 内存区域概述</title>
      <link>http://localhost:1313/2019/11/18/java-memory-areas/</link>
      <pubDate>Mon, 18 Nov 2019 15:32:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/18/java-memory-areas/</guid>
      <description>&lt;p&gt;本篇文章是对 Java 内存区域的概述与总结，大部分参考自&lt;a href=&#34;https://book.douban.com/subject/24722612/&#34;&gt;《深入理解 Java 虚拟机》&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，以及自己对这部分的理解。记性不好就先把它记下来，以便日后复习使用。如果能帮助到你的话最好了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>