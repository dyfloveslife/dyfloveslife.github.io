<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Carol&#39;s blog</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Aug 2020 19:21:02 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>最短路径问题</title>
      <link>http://localhost:1313/2020/08/26/alg-Shortest-Path-Problem/</link>
      <pubDate>Wed, 26 Aug 2020 19:21:02 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/08/26/alg-Shortest-Path-Problem/</guid>
      <description>&lt;p&gt;最近在参加秋招，笔试的过程中发现又不少公司喜欢考最短路径问题，例如完美世界、大疆等。现在再来总结复习一下这些板子题，希望下次再遇到这种类型的题之也后能 AC。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>算法题：恢复空格</title>
      <link>http://localhost:1313/2020/07/09/alg-re-space-LCCI/</link>
      <pubDate>Thu, 09 Jul 2020 21:24:02 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/07/09/alg-re-space-LCCI/</guid>
      <description>&lt;p&gt;本文详细解释《程序员面试金典》中的&lt;a href=&#34;https://leetcode-cn.com/problems/re-space-lcci/&#34;&gt;《恢复空格》&lt;/a&gt;一题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>http://localhost:1313/2020/06/01/sort-algorithm/</link>
      <pubDate>Mon, 01 Jun 2020 08:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/06/01/sort-algorithm/</guid>
      <description>&lt;p&gt;本文用于将常见的排序算法做一个总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP 总览</title>
      <link>http://localhost:1313/2020/05/27/TCP-overall/</link>
      <pubDate>Wed, 27 May 2020 20:00:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/27/TCP-overall/</guid>
      <description>&lt;p&gt;TCP 和 UDP 是 TCP/IP 协议簇中十分重要的两个协议，它们均位于运输层。之前的文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/05/27/TCP-3-way-and-4-way-handshake/&#34;&gt;《三次握手和四次挥手》&lt;/a&gt;介绍了 TCP 中建立连接和释放连接的过程，解释了详细的步骤。但由于意外或者其它原因，TCP 在传输的过程中并不是一帆风顺的。所以，本文主要介绍 TCP 和 UDP 的区别、TCP 流量控制、拥塞控制、超时重传、可靠传输的实现过程，分析在各种意外情况下 TCP 是如何保证可靠传输的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>三次握手和四次挥手</title>
      <link>http://localhost:1313/2020/05/27/TCP-3-way-and-4-way-handshake/</link>
      <pubDate>Wed, 27 May 2020 09:00:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/27/TCP-3-way-and-4-way-handshake/</guid>
      <description>&lt;p&gt;“三次握手”和“四次挥手”是 TCP 进行传输连接所涉及到的关键步骤，即建立 TCP 连接和释放 TCP 连接。当然，在这两者之间还有“数据传输”这一环节。本文主要讨论的是 TCP 建立连接以及释放连接的过程，并讨论为什么要这么设计等相关问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式汇总</title>
      <link>http://localhost:1313/2020/05/12/Design-Patterns/</link>
      <pubDate>Tue, 12 May 2020 11:43:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/12/Design-Patterns/</guid>
      <description>&lt;p&gt;之前或多或少接触过几种设计模式，只不过没有好好的总结。本文用于记录自己在设计模式方面的学习过程，在学习期间阅读了有关设计模式的书籍，挑选了博客园中优秀的文章，搜集网上的资料并进行了筛选，也看过别人对设计模式的总结。只是单纯看的话，会容易忘记。因此，我一般喜欢“输出式学习”，将学过的知识与自己对知识的理解整理下来，构建一套属于自己的知识体系。即便以后忘记了，也会通过浏览对原有知识的总结，很快重新拾起这部分的知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 ReentrantLock</title>
      <link>http://localhost:1313/2020/05/07/Java-ReentrantLock/</link>
      <pubDate>Thu, 07 May 2020 15:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/07/Java-ReentrantLock/</guid>
      <description>&lt;p&gt;上篇文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/05/01/Java-AQS/&#34;&gt;《Java 中的 AQS》&lt;/a&gt; 对 AbstractQueuedSynchronizer 中的方法及实现方式做了详细的解释。有了 AQS 和 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/29/Java-Atomic/#cas&#34;&gt;CAS&lt;/a&gt; 的基础以后，我们再来分析 ReentrantLock 就会更加容易一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 AQS</title>
      <link>http://localhost:1313/2020/05/01/Java-AQS/</link>
      <pubDate>Fri, 01 May 2020 11:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/01/Java-AQS/</guid>
      <description>&lt;p&gt;之前的&lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Lock/&#34;&gt;《Java 中的 Lock 及各种锁的概念》&lt;/a&gt;简单介绍了 Lock 的使用以及 Lock 的唯一实现类 ReentrantLock 中的方法。我们一般会拿 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;synchronized&lt;/a&gt; 和 ReentrantLock 做比较。而在了解 ReentrantLock 之前需要理解 AQS 的实现。因此，本文分析了 AQS 中主要的源码，包括独占模式与共享模式，为更好的认识 ReentrantLock 打下基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Atomic 包</title>
      <link>http://localhost:1313/2020/04/29/Java-Atomic/</link>
      <pubDate>Wed, 29 Apr 2020 15:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/29/Java-Atomic/</guid>
      <description>&lt;p&gt;为了在多线程并发的情况下能够保证多个线程对数据进行合理的访问，避免出现并发情况下的线程安全问题，Java 从 JDK1.5 开始提供了 java.util.concurrent.atomic 包，它可以通过&lt;code&gt;原子操作类&lt;/code&gt;来对某个变量实现更加简单、线程安全的更新操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 CopyOnWrite 容器</title>
      <link>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</link>
      <pubDate>Mon, 27 Apr 2020 15:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</guid>
      <description>&lt;p&gt;在某些&lt;code&gt;读多写少&lt;/code&gt;的多线程环境下，基于 CopyOnWrite 思想的 CopyOnWriteArrayList 容器和 CopyOnWriteArraySet 容器可以保证线程安全，能够确保读操作和写操作之间不会被阻塞。本文将会从 线程不安全的 ArrayList 入手，由 CopyOnWrite 思想引申到 CopyOnWriteArrayList，通过示例说明它是怎么保证线程安全的，适用的场景，最后对其进行总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的并发工具类</title>
      <link>http://localhost:1313/2020/04/21/Java-Concurrent-Tool-Class/</link>
      <pubDate>Tue, 21 Apr 2020 18:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/21/Java-Concurrent-Tool-Class/</guid>
      <description>&lt;p&gt;在 JDK 1.5 中的 java.util.concurrent 包下，有一些在并发情况下控制线程的工具类，有的可以控制并发流程，而有的可以交换线程之间的数据。通过这些辅助类可以更好的帮助我们进行并发编程，而本文主要介绍 CountDownLatch、CyclicBarrier、Semaphore、Exchanger 这四个并发工具类。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的阻塞队列</title>
      <link>http://localhost:1313/2020/04/16/Java-BlockingQueue/</link>
      <pubDate>Thu, 16 Apr 2020 16:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/16/Java-BlockingQueue/</guid>
      <description>&lt;p&gt;在之前的《&lt;a href=&#34;https://dyfloveslife.github.io/2020/04/14/Java-ThreadPool/&#34;&gt;Java 中的线程池&lt;/a&gt;》一文中，在介绍线程池参数的时候，其中&lt;code&gt;BlockingQueue&amp;lt;Runnable&amp;gt; workQueue&lt;/code&gt;用于存储等待执行的任务，提到了几种不同类型的等待队列。本文将详细的介绍阻塞队列的实现原理以及各自的使用方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的线程池</title>
      <link>http://localhost:1313/2020/04/14/Java-ThreadPool/</link>
      <pubDate>Tue, 14 Apr 2020 13:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/14/Java-ThreadPool/</guid>
      <description>&lt;p&gt;在多线程并发的环境下创建多个线程去执行任务，每当有一个任务到来的时候都需要创建一个线程去执行。这种方式虽然是可行的，但如果线程并发的数量很多，并且每个线程都是执行一个时间很短的任务就结束掉了，这样频繁的创建线程就会大大降低系统的运行效率，因为频繁的创建和销毁线程需要消耗额外的时间。对于这种情况，我们可以使用线程池技术让线程达到复用的目的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 ThreadLocal</title>
      <link>http://localhost:1313/2020/04/13/Java-ThreadLocal/</link>
      <pubDate>Mon, 13 Apr 2020 15:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/13/Java-ThreadLocal/</guid>
      <description>&lt;p&gt;使用 Java 中的 ThreadLocal 类可以创建只能由同一个线程读写的变量。也就是说，即使两个线程在执行相同的代码，并且代码中都有对同一个 ThreadLocal 变量的引用，那么这两个线程也不会看到对方的 ThreadLocal 变量。因此，Java 中的 ThreadLocal 类提供了一种简单的方式来使代码中的线程变得更加安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程间的通信机制</title>
      <link>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</link>
      <pubDate>Tue, 07 Apr 2020 22:10:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</guid>
      <description>&lt;p&gt;之前的文章，比如在多线程环境中使用 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;synchronized&lt;/a&gt; 和 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Lock/&#34;&gt;Lock&lt;/a&gt; 可以通过锁的方式实现线程之间的同步互斥访问临界资源。也就是说，只有当一个线程释放了锁之后，另一个线程才能获得锁，从而对数据进行操作。但在有些情况下，需要多个线程之间进行协作，以使得多个线程可以一起去解决某个问题，此时就需要采用线程通信-协作机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Lock 及各种锁的概念</title>
      <link>http://localhost:1313/2020/04/05/Java-Lock/</link>
      <pubDate>Sun, 05 Apr 2020 18:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Lock/</guid>
      <description>&lt;p&gt;上节 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;《Java 中的 synchronized》&lt;/a&gt;介绍了能够在多线程访问临界资源的情况下，使用 synchronized 关键字可以保证线程之间的顺序执行（序列化访问临界资源），即同一时刻只能由一个线程获得当前对象的锁。可以看到 synchronized 是在 JVM 层面实现了对临界资源的同步互斥访问，但锁的粒度较大。本文将介绍并发包下的 Lock 接口，同样也可以实现锁的功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 synchronized</title>
      <link>http://localhost:1313/2020/04/05/Java-Synchronized/</link>
      <pubDate>Sun, 05 Apr 2020 14:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Synchronized/</guid>
      <description>&lt;p&gt;在多线程并发的情况下，多线程同时访问的资源叫做临界资源（如变量、对象、文件等），当多个线程同时访问对象并要求操作相同资源时，其操作可能存在数据不一致或数据不完整的情况。为了避免这种情况的发生，需要采取同步互斥机制，以确保在某一时刻，方法内只允许一个线程对该资源进行操作，而其它线程只能等待。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>项目部署小结</title>
      <link>http://localhost:1313/2020/03/31/project-deployment/</link>
      <pubDate>Tue, 31 Mar 2020 09:03:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/31/project-deployment/</guid>
      <description>之前做的项目都是跑在本地的虚拟机上的，想到在腾讯云上还有一台云服务器，于是便打算将其部署到云服务器上，本文会涉及到一些部署上的流程以及一些坑</description>
    </item>
    
    <item>
      <title>Java 容器之 ConcurrentHashMap</title>
      <link>http://localhost:1313/2020/03/24/JavaSrc-ConcurrentHashMap/</link>
      <pubDate>Tue, 24 Mar 2020 14:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/24/JavaSrc-ConcurrentHashMap/</guid>
      <description>&lt;p&gt;ConcurrentHashMap 是 HashMap 的一个线程安全并且支持高并发的版本，之前的文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/02/12/JavaSrc-HashMap/&#34;&gt;《Java 容器之 HashMap》&lt;/a&gt;从 HashMap 的实现原理到各个方法的使用，以及每个方法各自的具体实现都分别进行了介绍，并将 JDK1.7 与 JDK1.8 中的 HashMap 进行了对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的序列化和反序列化</title>
      <link>http://localhost:1313/2020/03/21/Serialization-and-Deserialization-in-Java/</link>
      <pubDate>Sat, 21 Mar 2020 17:04:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/21/Serialization-and-Deserialization-in-Java/</guid>
      <description>&lt;p&gt;当在 Java 中创建对象的时候，只要我们需要这个对象，它就会一直存在。但是一旦程序终止，它们也就不复存在了。如果我们想让对象能够在程序不运行的状态下仍然能够保存它们的信息，那就需要用到&lt;code&gt;序列化机制&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 final 和 static 关键字</title>
      <link>http://localhost:1313/2020/03/20/Java-final-static/</link>
      <pubDate>Fri, 20 Mar 2020 13:32:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/20/Java-final-static/</guid>
      <description>之前对关键字 final 和 static 的具体使用场景很是模糊，什么时候使用 final，什么时候使用 static，当使用它们的时候会产生什么效果。本文将对 final 和 static 进</description>
    </item>
    
    <item>
      <title>Java 中的 Thread</title>
      <link>http://localhost:1313/2020/03/17/JavaSrc-Thread/</link>
      <pubDate>Tue, 17 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/17/JavaSrc-Thread/</guid>
      <description>&lt;p&gt;本文主要介绍 Thread 类中线程的六种状态以及各状态之间转换的方法，如 wait()、start()、run()、sleep() 等。在阐述线程的生命周期的同时，解释各个方法是如何使线程的状态进行转换的，以及在转换的过程中是否需要释放锁等问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 volatile</title>
      <link>http://localhost:1313/2020/03/16/Java-volatile/</link>
      <pubDate>Mon, 16 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/16/Java-volatile/</guid>
      <description>&lt;p&gt;volatile 是轻量级的 synchronized，其在多处理器中保证了共享变量的&lt;code&gt;可见性&lt;/code&gt;，即当一个线程修改一个共享变量时，另一个线程会读到这个修改的值。但 volatile 不能保证&lt;code&gt;原子性&lt;/code&gt;（例如自增操作），详细的说明将会在下文进行展开。保证并发程序正确执行还需要做到&lt;code&gt;有序性&lt;/code&gt;，满足以上三个原则，才能够正确的执行并发程序。而本文将对 volatile 关键字进行详细解释，结合具体例子的同时说明 volatile 关键字的使用场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashTable</title>
      <link>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</link>
      <pubDate>Wed, 11 Mar 2020 19:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</guid>
      <description>&lt;p&gt;前文对 JDK1.8 中的 &lt;a href=&#34;https://dyfloveslife.github.io/2020/02/12/JavaSrc-HashMap/&#34;&gt;HashMap&lt;/a&gt; 的在原理实现以及相关操作进行了说明，介绍了基于&lt;code&gt;数组（Node）+链表（尾插）+红黑树&lt;/code&gt;的数据结构，以及&lt;code&gt;resize()&lt;/code&gt;的过程。而本文将介绍与 HashMap 较为相似的&lt;code&gt;HashTable&lt;/code&gt;，同样也是基于&lt;code&gt;数组（Entry）+链表&lt;/code&gt;实现的，但&lt;code&gt;HashTable&lt;/code&gt;是线程同步的（synchroinzed），在某些方面又有一些区别，下面将分别介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 LinkedHashMap</title>
      <link>http://localhost:1313/2020/03/10/JavaSrc-LinkedHashMap/</link>
      <pubDate>Tue, 10 Mar 2020 15:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/10/JavaSrc-LinkedHashMap/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 LinkedHashMap 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 LinkedList</title>
      <link>http://localhost:1313/2020/03/07/JavaSrc-LinkedList/</link>
      <pubDate>Sat, 07 Mar 2020 19:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/07/JavaSrc-LinkedList/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 LinkedList 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 ArrayList</title>
      <link>http://localhost:1313/2020/03/04/JavaSrc-ArrayList/</link>
      <pubDate>Wed, 04 Mar 2020 15:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/04/JavaSrc-ArrayList/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 ArrayList 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KMP 算法</title>
      <link>http://localhost:1313/2020/02/18/kmp/</link>
      <pubDate>Tue, 18 Feb 2020 19:26:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/18/kmp/</guid>
      <description>&lt;p&gt;KMP 算法适用于求解字符串匹配的问题，网上有许多&lt;a href=&#34;https://www.google.com/search?q=Knuth-Morris-Pratt+algorithm&#34;&gt;文章&lt;/a&gt;对它都有详细的解释，之前在学习&lt;a href=&#34;https://book.douban.com/subject/1101779/&#34;&gt;数据结构&lt;/a&gt;的时候也对该算法有些了解，但一直没怎么总结。先将其进行回顾，并写下此文，以作备忘。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 单例模式[备忘]</title>
      <link>http://localhost:1313/2020/02/17/Singleton-pattern-in-java/</link>
      <pubDate>Mon, 17 Feb 2020 11:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/17/Singleton-pattern-in-java/</guid>
      <description>&lt;p&gt;很久没有复习单例模式了，今天做一个笔记，对 Java 中的单例模式做一个总结，以做备忘。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashMap</title>
      <link>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</link>
      <pubDate>Wed, 12 Feb 2020 17:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</guid>
      <description>&lt;p&gt;HapMap 中的 get 和 put 方法在 O(1) 的时间内即可完成，如此快速存取方式到底是怎么实现的？本文将对 HashMap 中的主要方法（get、put、resize）进行说明，对应的版本为 JDK 1.8。不过，为了更加详细的了解 HashMap 的优化过程，同时也会与 JDK 1.7 中的 HashMap 进行比较，从而对 HashMap 有一个较为全面的认识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 的基本概念与使用</title>
      <link>http://localhost:1313/2020/02/02/mysql-basic-concepts-and-use/</link>
      <pubDate>Sun, 02 Feb 2020 19:33:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/02/mysql-basic-concepts-and-use/</guid>
      <description>&lt;p&gt;本文将介绍 MySQL（My Structured Query Language）数据库的基本概念与以及在日常开发中的使用，包括对数据的增删改查操作、子查询、联结表、组合查询、存储过程、游标、触发器、事务管理等知识的总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的对象与引用</title>
      <link>http://localhost:1313/2020/02/01/java-object-and-reference/</link>
      <pubDate>Sat, 01 Feb 2020 19:00:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/01/java-object-and-reference/</guid>
      <description>&lt;p&gt;更好的理解 Java 中的 &lt;code&gt;对象&lt;/code&gt; 和 &lt;code&gt;引用&lt;/code&gt; 是面向对象技术的前提，本文旨在讨论如何理解它们的含义以及它们之间的关系。如有错误，还请指出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Exception 和 Error</title>
      <link>http://localhost:1313/2020/01/21/JavaCore-difference-between-exception-and-error/</link>
      <pubDate>Tue, 21 Jan 2020 11:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/01/21/JavaCore-difference-between-exception-and-error/</guid>
      <description>&lt;p&gt;程序的异常处理在开发中很是常见，只有正确处理好意外情况，才能保证程序的可靠性。本文通过 Java 异常处理机制，详细的分析与解释 Java 中的 Exception 与 Error 之间的区别以及需要注意的点，以便更好的实现程序的可维护性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何理解 Java?</title>
      <link>http://localhost:1313/2020/01/21/JavaCore-understand-java/</link>
      <pubDate>Tue, 21 Jan 2020 10:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/01/21/JavaCore-understand-java/</guid>
      <description>&lt;p&gt;“一次编译，到处执行” 又能体现 Java 的哪些思想？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 圆圈中最后剩下的数字（约瑟夫环问题）</title>
      <link>http://localhost:1313/2019/12/27/offer-Josephus/</link>
      <pubDate>Fri, 27 Dec 2019 09:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/27/offer-Josephus/</guid>
      <description>&lt;p&gt;《剑指 Offer》中涉及到了约瑟夫环问题，虽然下面文章中所描述的和书中的题目有些差异，但从总体上看，都涉及到了约瑟夫环问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>打好这一仗！</title>
      <link>http://localhost:1313/2019/12/24/fight-in-2020/</link>
      <pubDate>Tue, 24 Dec 2019 20:44:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/24/fight-in-2020/</guid>
      <description>&lt;p&gt;打好明年春招和秋招这一仗，是我在 2020 年最重要的事。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于相关滤波器（Correlation Filters）的 MOSSE 算法</title>
      <link>http://localhost:1313/2019/12/16/Correlation-Filter/</link>
      <pubDate>Mon, 16 Dec 2019 17:44:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/16/Correlation-Filter/</guid>
      <description>&lt;p&gt;本文将会从 &lt;code&gt;相关滤波器&lt;/code&gt; 的相关理论进行展开，讲述如何将信号处理领域的 &lt;code&gt;相关滤波器&lt;/code&gt; 融入到目前比较热门的 &lt;code&gt;目标追踪&lt;/code&gt; 领域，以及对 &lt;code&gt;MOSSE&lt;/code&gt; 算法进行了介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之基础类 Integer</title>
      <link>http://localhost:1313/2019/12/13/JavaSrc-BasicClass-Integer/</link>
      <pubDate>Fri, 13 Dec 2019 21:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/13/JavaSrc-BasicClass-Integer/</guid>
      <description>&lt;p&gt;本片文章主要介绍 Integer 类中一些比较常用的方法，并分析该类在 Java 中的作用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 最长不含重复字符的子字符串</title>
      <link>http://localhost:1313/2019/12/11/offer-longest-SubString-Without-Duplication/</link>
      <pubDate>Wed, 11 Dec 2019 16:47:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/11/offer-longest-SubString-Without-Duplication/</guid>
      <description>&lt;p&gt;本文是对解题思路的整理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再谈 String s1 = &#34;123&#34; 与 String s2 = new String(&#34;123&#34;)</title>
      <link>http://localhost:1313/2019/12/09/talk-with-String/</link>
      <pubDate>Mon, 09 Dec 2019 20:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/09/talk-with-String/</guid>
      <description>&lt;p&gt;之前在介绍 &lt;a href=&#34;https://dyfloveslife.github.io/2019/12/04/JavaSrc-BasicClass-Object/#equals&#34;&gt;JDK 源码之基础类 Object&lt;/a&gt; 中 &lt;code&gt;equals()&lt;/code&gt; 方法的时候，稍微提到了关于在声明一个 String 变量的时候，通过其内存地址或具体内容来比较两个变量是否相同。本篇文章是对之前文章的进一步理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之基础类 Object</title>
      <link>http://localhost:1313/2019/12/04/JavaSrc-BasicClass-Object/</link>
      <pubDate>Wed, 04 Dec 2019 18:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/04/JavaSrc-BasicClass-Object/</guid>
      <description>&lt;p&gt;主要介绍 Java 中 Object 类的常见方法，通过阅读源码的方式加深对各种方法的理解。如有错误，欢迎在评论中和我一起讨论交流。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 数字序列中某一位的数字</title>
      <link>http://localhost:1313/2019/11/29/offer-DigitsInSequence/</link>
      <pubDate>Fri, 29 Nov 2019 19:23:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/29/offer-DigitsInSequence/</guid>
      <description>&lt;p&gt;这道题目和&lt;a href=&#34;https://dyfloveslife.github.io/2019/11/28/offer-NumberOf1Between1AndN/&#34;&gt;《剑指 Offer 之 从整数 1 到 n 中 1 出现的次数》&lt;/a&gt;是一样的，也是通过寻找数字序列的规律解决的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 从整数 1 到 n 中 1 出现的次数</title>
      <link>http://localhost:1313/2019/11/28/offer-NumberOf1Between1AndN/</link>
      <pubDate>Thu, 28 Nov 2019 15:26:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/28/offer-NumberOf1Between1AndN/</guid>
      <description>&lt;p&gt;该题是剑指 Offer 中一道考验分析数字规律的题，在 LeetCode 上看到一种十分巧妙的方法，为此在这里记录一下，以便日后复习。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 垃圾收集器与内存分配策略</title>
      <link>http://localhost:1313/2019/11/22/gc-and-memory-allocation-strategy/</link>
      <pubDate>Fri, 22 Nov 2019 08:55:16 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/22/gc-and-memory-allocation-strategy/</guid>
      <description>&lt;p&gt;上篇文章 &lt;a href=&#34;https://dyfloveslife.github.io/2019/11/20/object-survival-and-gc-algorithm/&#34;&gt;《JVM 对象存活和垃圾收集算法》&lt;/a&gt; 对 JVM 中的对象是否存活以及几种垃圾收集算法进行了说明，而本文将对内存回收的具体实现，即对 &lt;code&gt;垃圾收集器&lt;/code&gt; 进行归类与总结。同时，也将介绍一个对象是如何在堆内存中的不同区域进行分配的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 对象存活和垃圾收集算法</title>
      <link>http://localhost:1313/2019/11/20/object-survival-and-gc-algorithm/</link>
      <pubDate>Wed, 20 Nov 2019 20:56:16 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/20/object-survival-and-gc-algorithm/</guid>
      <description>&lt;p&gt;本文是对《深入理解 Java 虚拟机》中第 3 章前半部分的回顾与总结，这部分也是 JVM 的重点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 内存区域概述</title>
      <link>http://localhost:1313/2019/11/18/java-memory-areas/</link>
      <pubDate>Mon, 18 Nov 2019 15:32:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/18/java-memory-areas/</guid>
      <description>&lt;p&gt;本篇文章是对 Java 内存区域的概述与总结，大部分参考自&lt;a href=&#34;https://book.douban.com/subject/24722612/&#34;&gt;《深入理解 Java 虚拟机》&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，以及自己对这部分的理解。记性不好就先把它记下来，以便日后复习使用。如果能帮助到你的话最好了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从 Hexo 到 Hugo 的配置与总结</title>
      <link>http://localhost:1313/2019/11/16/hexo-to-hugo/</link>
      <pubDate>Sat, 16 Nov 2019 13:56:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/16/hexo-to-hugo/</guid>
      <description>&lt;p&gt;从 2017 年使用 Hexo 生成 blog 到现在已经过去很长时间了，自己也修改网页的样式，添加了许多实用的功能。但一直以来 Hexo 生成静态资源的速度不是那么的快，甚至需要好几秒的时间。直到后来使用 Hugo 的时候发现，&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 在这方面是真的快，仅需几百毫秒就可以生成静态资源。这就萌生了我从 Hexo 转换到 Hugo 的想法，毕竟 Hugo 是用 Go 写的嘛。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>情景再现 Linux 中的 IO 模型</title>
      <link>http://localhost:1313/2019/11/13/linux-io/</link>
      <pubDate>Wed, 13 Nov 2019 07:52:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/13/linux-io/</guid>
      <description>&lt;p&gt;本文通过「情景再现」的方式解释 Linux 中的 IO 模型，这对于学习 &lt;strong&gt;Java 高并发&lt;/strong&gt; 还是有些许帮助的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>可变长子网掩码在子网划分中的应用「转」</title>
      <link>http://localhost:1313/2019/11/06/VLSM/</link>
      <pubDate>Wed, 06 Nov 2019 19:23:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/06/VLSM/</guid>
      <description>&lt;p&gt;本文转自 51CTO 的作者「百年求索」——《可变长度子网掩码（VLSM）在子网划分中的应用》。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>去掉 DropBox 桌面右键菜单</title>
      <link>http://localhost:1313/2019/11/05/Delete-dropbox-right-click-menu/</link>
      <pubDate>Tue, 05 Nov 2019 10:15:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/05/Delete-dropbox-right-click-menu/</guid>
      <description>&lt;p&gt;通过删除注册表的方式将鼠标右键菜单中的 &lt;code&gt;使用转移功能发送...&lt;/code&gt; 去掉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>软考知识点总结</title>
      <link>http://localhost:1313/2019/11/04/ruankao/</link>
      <pubDate>Mon, 04 Nov 2019 20:01:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/11/04/ruankao/</guid>
      <description>&lt;p&gt;再有一段时间就软考了，这篇文章是为了将之前看过的、出现频率比较高的知识点总结一下，以便日后复习用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 数组中重复的数字</title>
      <link>http://localhost:1313/2019/09/11/offer-FindDuplicationInArray/</link>
      <pubDate>Wed, 11 Sep 2019 21:32:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/11/offer-FindDuplicationInArray/</guid>
      <description>&lt;p&gt;在一个长度为 &lt;code&gt;n&lt;/code&gt; 的数组里的所有数字都在 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;n-1&lt;/code&gt; 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 二叉树的下一个节点</title>
      <link>http://localhost:1313/2019/09/11/offer-NextNodeInBinaryTrees/</link>
      <pubDate>Wed, 11 Sep 2019 16:26:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/11/offer-NextNodeInBinaryTrees/</guid>
      <description>&lt;p&gt;给定一棵二叉树和其中的一个节点，找出中序遍历顺序的下一个节点。树中的节点除了有两个分别指向左右子节点的指针以外，还有一个指向父节点的指针。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 从尾到头打印链表</title>
      <link>http://localhost:1313/2019/09/11/offer-PrintListInReversedOrder/</link>
      <pubDate>Wed, 11 Sep 2019 15:30:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/11/offer-PrintListInReversedOrder/</guid>
      <description>&lt;p&gt;输入一个链表，从尾到头反过来打印出每个结点的值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 替换空格</title>
      <link>http://localhost:1313/2019/09/11/offer-ReplaceSpaces/</link>
      <pubDate>Wed, 11 Sep 2019 14:57:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/11/offer-ReplaceSpaces/</guid>
      <description>&lt;p&gt;请实现一个函数，把字符串中的每个空格替换成 &lt;code&gt;%20&lt;/code&gt;。例如输入 &lt;code&gt;We are happy.&lt;/code&gt;，则输出 &lt;code&gt;We%20are%20happy.&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 二维数组中的查找</title>
      <link>http://localhost:1313/2019/09/11/offer-FindInPartiallySortedMatrix/</link>
      <pubDate>Wed, 11 Sep 2019 14:31:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/11/offer-FindInPartiallySortedMatrix/</guid>
      <description>&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>剑指 Offer 之 重建二叉树</title>
      <link>http://localhost:1313/2019/09/11/offer-ConstructBinaryTree/</link>
      <pubDate>Wed, 11 Sep 2019 10:48:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/09/11/offer-ConstructBinaryTree/</guid>
      <description>&lt;p&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列 &lt;code&gt;{1, 2, 4, 7, 3, 5, 6, 8}&lt;/code&gt; 和中序遍历序列&lt;code&gt;{4, 7, 2, 1, 5, 3, 8, 6}&lt;/code&gt;，则重建出二叉树并输出它的头结点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> Spring 学习笔记（三）依赖注入 DI </title>
      <link>http://localhost:1313/2019/08/03/spring-di/</link>
      <pubDate>Sat, 03 Aug 2019 21:03:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/03/spring-di/</guid>
      <description>&lt;p&gt;本篇文章主要对 Spring 框架中的核心功能之一&lt;strong&gt;依赖注入 (DI，Dependency Injection)&lt;/strong&gt; 进行介绍，也是采用 &lt;strong&gt;理论+实战&lt;/strong&gt; 的方式给大家阐述其中的原理以及明确需要注意的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> Spring 学习笔记（二）控制反转 IoC </title>
      <link>http://localhost:1313/2019/08/03/spring-ioc/</link>
      <pubDate>Sat, 03 Aug 2019 16:30:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/03/spring-ioc/</guid>
      <description>&lt;p&gt;本篇文章主要对 Spring 框架中的核心功能之一&lt;strong&gt;控制反转 (IOC，Inversion of Control)&lt;/strong&gt; 进行介绍，采用 &lt;strong&gt;理论+实战&lt;/strong&gt; 的方式给大家阐述其中的原理以及明确需要注意的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> Spring 学习笔记（一）框架介绍</title>
      <link>http://localhost:1313/2019/08/03/spring-framework-introduction/</link>
      <pubDate>Sat, 03 Aug 2019 13:15:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/03/spring-framework-introduction/</guid>
      <description>&lt;p&gt;本篇文章主要对 Spring 框架进行整体介绍，包括其核心功能模块与体系结构，让大家对该框架有个大体的认识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> Spring 学习笔记（零）文章导读</title>
      <link>http://localhost:1313/2019/08/03/spring-outline/</link>
      <pubDate>Sat, 03 Aug 2019 10:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/08/03/spring-outline/</guid>
      <description>《Spring学习笔记》系列文章是博主在学习过 Spring 后对其进行总结的入门系列博文，适合初入 Spring 的小白，如果你最近正在学习或者打算学习 Spring 的话，不妨随</description>
    </item>
    
    <item>
      <title>Chrome 浏览器使用小贴士</title>
      <link>http://localhost:1313/2019/05/12/chrome-tips/</link>
      <pubDate>Sun, 12 May 2019 13:12:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/05/12/chrome-tips/</guid>
      <description>&lt;p&gt;本篇文章主要介绍以下内容：
1. 开启 Chrome 浏览器多线程下载；
2. 加速 Youtube、Netflix 等流媒体视频播放。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用迁移学习来区分外星人和铁血战士</title>
      <link>http://localhost:1313/2019/04/08/how-to-distinguish-Aliens-vs-Predators-with-transfer-learning/</link>
      <pubDate>Mon, 08 Apr 2019 08:04:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/04/08/how-to-distinguish-Aliens-vs-Predators-with-transfer-learning/</guid>
      <description>&lt;p&gt;不管是区分外星人和铁血战士，还是对图像进行分类的其他问题，都可以利用机器学习的方法来进行处理，而且使用起来更高效、更有趣。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>我的一些思考</title>
      <link>http://localhost:1313/2019/03/07/some-of-my-thoughts/</link>
      <pubDate>Thu, 07 Mar 2019 16:39:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/03/07/some-of-my-thoughts/</guid>
      <description>&lt;p&gt;这些思考之前也有过，只不过被自然辩证法的老师给激发了出来，在这里记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matlab 编译文件时出错，提示 cl.exe 不是内部或外部命令</title>
      <link>http://localhost:1313/2019/03/05/compilienn-file/</link>
      <pubDate>Tue, 05 Mar 2019 15:18:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/03/05/compilienn-file/</guid>
      <description>&lt;p&gt;在用Matlab中的 &lt;code&gt;vl_compilenn&lt;/code&gt; 函数进行编译时，提示 &lt;strong&gt;&amp;lsquo;cl.exe&amp;rsquo; 不是内部或外部命令，也不是可运行的程序 或批处理文件&lt;/strong&gt; 的错误，现已找到解决办法，在这里记录下来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>加速 Github 的 clone 速度</title>
      <link>http://localhost:1313/2019/03/05/accelerate-github-clone/</link>
      <pubDate>Tue, 05 Mar 2019 08:27:02 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/03/05/accelerate-github-clone/</guid>
      <description>&lt;p&gt;今天在 Github 上要 clone 一个感兴趣的库到本地，发现 clone 速度奇慢无比。于是在 Github 上搜索加速 clone 的方法，亲身体验后发现，clone 速度提升巨大，你也赶快来试试吧！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>坚持不懈</title>
      <link>http://localhost:1313/2019/02/28/20190228/</link>
      <pubDate>Thu, 28 Feb 2019 19:37:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/02/28/20190228/</guid>
      <description>&lt;p&gt;开学到现在已经有四天的时间了，这几天除了整理东西、准备开学以外，留给自己的学习时间还真没有多少。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018年总结</title>
      <link>http://localhost:1313/2019/02/03/20190203/</link>
      <pubDate>Sun, 03 Feb 2019 19:38:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/02/03/20190203/</guid>
      <description>&lt;p&gt;其实学校很早就放假了，回到家休息了一段时间后才有心思总结2018年的点点滴滴。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>20181206</title>
      <link>http://localhost:1313/2018/12/06/20181206/</link>
      <pubDate>Thu, 06 Dec 2018 07:59:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/12/06/20181206/</guid>
      <description>&lt;p&gt;上周末导师突然说不开例会了，重点复习六级和期末考试。这几天也没看论文，突然感觉好像少了点什么&amp;hellip;&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>20181126</title>
      <link>http://localhost:1313/2018/11/26/20181126/</link>
      <pubDate>Mon, 26 Nov 2018 07:59:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/11/26/20181126/</guid>
      <description>&lt;p&gt;上周终于忙完了立项答辩，幸运的是老师没怎么怼我。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>读书</title>
      <link>http://localhost:1313/2018/11/21/read-books/</link>
      <pubDate>Wed, 21 Nov 2018 08:06:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/11/21/read-books/</guid>
      <description>&lt;p&gt;人生多姿多彩，又怎能少得了读书！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>20181119</title>
      <link>http://localhost:1313/2018/11/19/20181119/</link>
      <pubDate>Mon, 19 Nov 2018 18:57:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/11/19/20181119/</guid>
      <description>&lt;p&gt;好久没写博客啦，感觉文章的输出突然少了许多（好像之前也没怎么输出），本篇文章就记录一下这几天发生的事情吧~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>随记</title>
      <link>http://localhost:1313/2018/11/07/20181107-suiji/</link>
      <pubDate>Wed, 07 Nov 2018 12:53:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/11/07/20181107-suiji/</guid>
      <description>&lt;p&gt;从开学到现在已经两个多月了，这两个月以来，我收获了许多，但最重要的是收获了爱❤情！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>国庆小记</title>
      <link>http://localhost:1313/2018/10/08/guoqingxiaoji/</link>
      <pubDate>Mon, 08 Oct 2018 10:28:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/10/08/guoqingxiaoji/</guid>
      <description>&lt;p&gt;国庆七天的假期过得很快，这里是一些碎碎念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>中秋小记</title>
      <link>http://localhost:1313/2018/09/25/zhongqiuxiaoji/</link>
      <pubDate>Tue, 25 Sep 2018 12:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/09/25/zhongqiuxiaoji/</guid>
      <description>&lt;p&gt;&lt;center&gt;
《望月怀远》&lt;/p&gt;

&lt;p&gt;张九龄&lt;/p&gt;

&lt;p&gt;海上生明月，天涯共此时。&lt;/p&gt;

&lt;p&gt;情人怨遥夜，竟夕起相思。&lt;/p&gt;

&lt;p&gt;灭烛怜光满，披衣觉露滋。&lt;/p&gt;

&lt;p&gt;不堪盈手赠，还寝梦佳静。
&lt;/center&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>学会写作和英语</title>
      <link>http://localhost:1313/2018/08/27/learning-writing-and-english/</link>
      <pubDate>Mon, 27 Aug 2018 20:16:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/08/27/learning-writing-and-english/</guid>
      <description>&lt;p&gt;常常提起笔不知道该写什么，有时一个话题在脑中要构思好久。对于日常的学习往往只是输入，而没有用自己的理解对相应的知识进行输出，这是我目前的状态。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 中的 logging</title>
      <link>http://localhost:1313/2018/08/16/learning-python-logging/</link>
      <pubDate>Thu, 16 Aug 2018 16:51:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/08/16/learning-python-logging/</guid>
      <description>&lt;p&gt;日志记录是一种跟踪软件在运行时所发生的任何事件的方法。也就是说，在日常开发过程中，我们可以将程序所产生的事件用日志的形式记录下来，以此来查看程序逻辑执行得是否合理。这对于开发人员来说十分的重要。本篇文章使用Python中的logging来对日志的一些操作展开说明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 模块</title>
      <link>http://localhost:1313/2018/08/15/learning-python-Module/</link>
      <pubDate>Wed, 15 Aug 2018 16:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/08/15/learning-python-Module/</guid>
      <description>&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/Module/contents.png&#34; alt=&#34;Module-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 中的 JSON 数据解析</title>
      <link>http://localhost:1313/2018/08/14/learning-python-JSON/</link>
      <pubDate>Tue, 14 Aug 2018 10:28:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/08/14/learning-python-JSON/</guid>
      <description>&lt;p&gt;JSON（JavaScript Object Notation）是一种使用JavaScript表示的轻量级数据格式。JSON数据包很小并且很快被浏览器解析。今天我们将探讨如何在Python中读取和编写JSON数据。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 实战之 爬取酷狗音乐 Top500</title>
      <link>http://localhost:1313/2018/08/05/learning-python-KuGouTop500/</link>
      <pubDate>Sun, 05 Aug 2018 21:27:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/08/05/learning-python-KuGouTop500/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;　　学习Python有一段时间了，基础的语法过了一遍，也做了一些小例子，但总是感觉不能熟练的运用。为了巩固所学知识，增加实战经验，解锁更多知识点，本篇文章做了一次爬虫练习，通过具体的需求，明确爬虫的具体思路，掌握Python常用的数据结构，以此提高对Python学习的兴趣，加深基础知识的了解。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>OpenCV3.4 &#43; VS2017 &#43; Win7 环境搭建</title>
      <link>http://localhost:1313/2018/08/01/opencv-BuildEnv/</link>
      <pubDate>Wed, 01 Aug 2018 14:28:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/08/01/opencv-BuildEnv/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;　　由于研究生选择的方向与计算机视觉有关，需要用到OpenCV和Matlab来处理图像，所以在这里先把环境搭建起来，然后通过一些小例子来逐渐熟悉OpenCV的使用。这算是一个学习系列的教程吧，也可以说是自己的学习总结，便于以后回顾。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Python 中的浅拷贝(copy)和深拷贝(deepcopy)</title>
      <link>http://localhost:1313/2018/07/30/learning-python-CopyAndDeepCopy/</link>
      <pubDate>Mon, 30 Jul 2018 18:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/30/learning-python-CopyAndDeepCopy/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;直接赋值：即对象的引用，其对象的&lt;code&gt;id&lt;/code&gt;不变。&lt;/li&gt;
&lt;li&gt;浅拷贝（copy）：拷贝父对象，不会拷贝对象的内部的子对象。&lt;/li&gt;
&lt;li&gt;深拷贝（deepcopy）：拷贝父对象及其子对象。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>C 语言中 main 函数的参数</title>
      <link>http://localhost:1313/2018/07/29/main_function_of_c/</link>
      <pubDate>Sun, 29 Jul 2018 15:17:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/29/main_function_of_c/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/C/main_function.png&#34; alt=&#34;main_function&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 类和对象</title>
      <link>http://localhost:1313/2018/07/16/learning-python-ClassesAndObjects/</link>
      <pubDate>Mon, 16 Jul 2018 14:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/16/learning-python-ClassesAndObjects/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/ClassesAndObjects/contents.png&#34; alt=&#34;ClassesAndObjects-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 数据结构</title>
      <link>http://localhost:1313/2018/07/15/learning-python-DataStructure/</link>
      <pubDate>Sun, 15 Jul 2018 14:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/15/learning-python-DataStructure/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/DataStructure/contents.png&#34; alt=&#34;DataStructure-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 变量作用域</title>
      <link>http://localhost:1313/2018/07/14/learning-python-VariableScope/</link>
      <pubDate>Sat, 14 Jul 2018 14:50:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/14/learning-python-VariableScope/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/VariableScope/contents.png&#34; alt=&#34;VariableScope-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 函数</title>
      <link>http://localhost:1313/2018/07/13/learning-python-Function/</link>
      <pubDate>Fri, 13 Jul 2018 16:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/13/learning-python-Function/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/Function/contents.png&#34; alt=&#34;Function-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 迭代器和生成器</title>
      <link>http://localhost:1313/2018/07/13/learning-python-IteratorsAndGenerators/</link>
      <pubDate>Fri, 13 Jul 2018 15:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/13/learning-python-IteratorsAndGenerators/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/IteratorsAndGenerators/contents.png&#34; alt=&#34;IteratorsAndGenerators-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 循环语句</title>
      <link>http://localhost:1313/2018/07/09/learning-python-LoopStatement/</link>
      <pubDate>Mon, 09 Jul 2018 15:51:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/09/learning-python-LoopStatement/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/LoopStatement/contents.png&#34; alt=&#34;LoopStatement-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 条件控制</title>
      <link>http://localhost:1313/2018/07/09/lenrning-python-ConditionalControl/</link>
      <pubDate>Mon, 09 Jul 2018 14:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/09/lenrning-python-ConditionalControl/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/ConditionalControl/contents.png&#34; alt=&#34;ConditionalControl-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 运算符</title>
      <link>http://localhost:1313/2018/07/07/learning-python-Operator/</link>
      <pubDate>Sat, 07 Jul 2018 17:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/07/learning-python-Operator/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/Operator/contents.png&#34; alt=&#34;Operator-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 基本数据类型</title>
      <link>http://localhost:1313/2018/07/06/learning-python-BasicDataType/</link>
      <pubDate>Fri, 06 Jul 2018 14:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/06/learning-python-BasicDataType/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;要点概括：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/BasicDataType/contents.png&#34; alt=&#34;BasicGrammar-contents&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习笔记之 基础语法</title>
      <link>http://localhost:1313/2018/07/05/learning-python-BasicGrammar/</link>
      <pubDate>Thu, 05 Jul 2018 14:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/07/05/learning-python-BasicGrammar/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;人生苦短，我用Python！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/Python/python-logo.png&#34; alt=&#34;Python-logo&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018 毕业总结</title>
      <link>http://localhost:1313/2018/06/21/2018-Graduation-Summary/</link>
      <pubDate>Thu, 21 Jun 2018 17:12:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/06/21/2018-Graduation-Summary/</guid>
      <description>&lt;p&gt;时间过得真快，在学校的这两年什么事情都发生过，有开心的时刻，也有后悔和不舍。总之十分感谢学校，也不枉自己在学校里学到了许多东西。马上毕业了，在这里做一个总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018 年 4 月到 8 月规划</title>
      <link>http://localhost:1313/2018/04/04/2018-4to8month-plan/</link>
      <pubDate>Wed, 04 Apr 2018 11:46:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/04/04/2018-4to8month-plan/</guid>
      <description>&lt;p&gt;研究生复试工作也结束了，回到学校之后我想把接下来的几个月的时间好好利用起来。所以现在做一个简单的计划，这样可以引导我以后做什么、怎么做，而不会把时间浪费在其他的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017 年总结</title>
      <link>http://localhost:1313/2018/02/11/2017-summary/</link>
      <pubDate>Sun, 11 Feb 2018 16:32:56 +0800</pubDate>
      
      <guid>http://localhost:1313/2018/02/11/2017-summary/</guid>
      <description>&lt;p&gt;马上就快过年了，考完研后回到家一直没写东西，拖到现在&amp;hellip;&lt;/p&gt;

&lt;p&gt;今天正好有时间，总结一下吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017 下半年小结</title>
      <link>http://localhost:1313/2017/07/12/2017-Second-half/</link>
      <pubDate>Wed, 12 Jul 2017 19:56:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/07/12/2017-Second-half/</guid>
      <description>&lt;p&gt;考研就像是一场大家都蒙着眼睛的长跑，彼此看不见跑得有多快。你能做的就是尽可能的快的跑下去，等到终点你摘下眼罩一看，你可能就是第一名。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网络综合布线</title>
      <link>http://localhost:1313/2017/06/22/NetworkCabling-1/</link>
      <pubDate>Thu, 22 Jun 2017 09:18:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/22/NetworkCabling-1/</guid>
      <description>&lt;h1 id=&#34;1-每个楼层的用线计算公式&#34;&gt;1. 每个楼层的用线计算公式&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/zhbx/gs2.png&#34; alt=&#34;zhbx&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C 为每个楼层用线量&lt;/li&gt;
&lt;li&gt;F 为最远的信息插座离楼层管理间的距离&lt;/li&gt;
&lt;li&gt;N 为最近的信息插座离楼层管理间的距离&lt;/li&gt;
&lt;li&gt;M 为每层楼的信息插座的数量&lt;/li&gt;
&lt;li&gt;6 为端对容差(考虑施工时线缆的损耗、线缆布设长度误差等因素)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Windows 环境下配置 DNS 服务器</title>
      <link>http://localhost:1313/2017/06/04/Windows-DNS/</link>
      <pubDate>Sun, 04 Jun 2017 20:29:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/04/Windows-DNS/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;软件： &lt;code&gt;VMware Workstation Pro&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;环境： &lt;code&gt;Windows 2008 R2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Windows 环境下配置 Web 服务器</title>
      <link>http://localhost:1313/2017/06/03/Windows-Web/</link>
      <pubDate>Sat, 03 Jun 2017 22:46:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/03/Windows-Web/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;软件： &lt;code&gt;VMware Workstation Pro&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;环境： &lt;code&gt;Windows 2008 R2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Windows 环境下配置 FTP 服务器</title>
      <link>http://localhost:1313/2017/06/03/Windows-FTP/</link>
      <pubDate>Sat, 03 Jun 2017 16:17:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/03/Windows-FTP/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;软件： &lt;code&gt;VMware Workstation Pro&lt;/code&gt;
环境： &lt;code&gt;Windows 2008 R2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;步骤：
1.  配置虚拟机静态IP
2.  安装Web服务器(IIS)，同时安装FTP服务器。
3.  添加站点
4.  用户名登录
5.  下载、上传文件
6.  隔离用户&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 环境下配置 DNS 服务器</title>
      <link>http://localhost:1313/2017/06/03/Linux-DNS/</link>
      <pubDate>Sat, 03 Jun 2017 13:24:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/03/Linux-DNS/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;说明：在虚拟机（VMware Workstation Pro）下运行 Red Hat Linux。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有两个软件包：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;shrike-i386-disc1.iso、shrike-i386-disc2.iso。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 环境下配置 DHCP 服务器</title>
      <link>http://localhost:1313/2017/06/03/Linux-DHCP/</link>
      <pubDate>Sat, 03 Jun 2017 11:28:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/03/Linux-DHCP/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;说明：在虚拟机（VMware Workstation Pro）下运行 Red Hat Linux。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用到两个软件包：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;shrike-i386-disc1.iso&lt;/strong&gt;、&lt;strong&gt;shrike-i386-disc2.iso&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows 环境下配置 DHCP</title>
      <link>http://localhost:1313/2017/06/03/Windows-DHCP/</link>
      <pubDate>Sat, 03 Jun 2017 10:49:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/03/Windows-DHCP/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;软件： &lt;code&gt;VMware Workstation Pro&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;环境： &lt;code&gt;Windows 2008 R2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux 环境下配置 Web 服务器</title>
      <link>http://localhost:1313/2017/06/02/Linux-WebServer/</link>
      <pubDate>Fri, 02 Jun 2017 21:41:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/02/Linux-WebServer/</guid>
      <description>&lt;p&gt;&lt;strong&gt;2017/6/6 [更新]基于端口的虚拟主机&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 环境下配置 FTP 服务器</title>
      <link>http://localhost:1313/2017/06/01/Linux-FTP/</link>
      <pubDate>Thu, 01 Jun 2017 22:43:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/06/01/Linux-FTP/</guid>
      <description>&lt;p&gt;&lt;strong&gt;2017/6/5 [更新]文件上传、下载功能。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2017/6/8 [更新]实现只有本地 dog 可以访问 ftp，以 user 为代表的其他用户不可以访问。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 环境下配置 Web 服务器之 通过域名访问主机</title>
      <link>http://localhost:1313/2017/05/18/Linux-WebServer-AccessHostThroughDomainName/</link>
      <pubDate>Thu, 18 May 2017 14:37:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/05/18/Linux-WebServer-AccessHostThroughDomainName/</guid>
      <description>&lt;p&gt;说明：在虚拟机（VMware Workstation Pro）下运行Red Hat Linux。
同时有三个软件包：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shrike-i386-disc1.iso&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shrike-i386-disc2.iso&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shrike-i386-disc3.iso&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>我使用的应用软件</title>
      <link>http://localhost:1313/2017/03/27/My-computer-application-software/</link>
      <pubDate>Mon, 27 Mar 2017 20:51:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2017/03/27/My-computer-application-software/</guid>
      <description>&lt;p&gt;从开始用电脑到现在，我也在自己的电脑上安装了不少的软件。有相关开发平台的软件，也有提升效率的各种小软件。想着以后有可能重装系统，在这里把我电脑上安装的软件做个记录，以后也许会用到。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>