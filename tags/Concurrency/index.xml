<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on Carol&#39;s blog</title>
    <link>http://localhost:1313/tags/Concurrency/</link>
    <description>Recent content in Concurrency on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Apr 2020 15:02:11 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/Concurrency/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 中的 Atomic 包</title>
      <link>http://localhost:1313/2020/04/29/Java-Atomic/</link>
      <pubDate>Wed, 29 Apr 2020 15:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/29/Java-Atomic/</guid>
      <description>&lt;p&gt;为了在多线程并发的情况下能够保证多个线程对数据进行合理的访问，避免出现并发情况下的线程安全问题，Java 从 JDK1.5 开始提供了 java.util.concurrent.atomic 包，它可以通过&lt;code&gt;原子操作类&lt;/code&gt;来对某个变量实现更加简单、线程安全的更新操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 CopyOnWrite 容器</title>
      <link>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</link>
      <pubDate>Mon, 27 Apr 2020 15:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</guid>
      <description>&lt;p&gt;在某些&lt;code&gt;读多写少&lt;/code&gt;的多线程环境下，基于 CopyOnWrite 思想的 CopyOnWriteArrayList 容器和 CopyOnWriteArraySet 容器可以保证线程安全，能够确保读操作和写操作之间不会被阻塞。本文将会从 线程不安全的 ArrayList 入手，由 CopyOnWrite 思想引申到 CopyOnWriteArrayList，通过示例说明它是怎么保证线程安全的，适用的场景，最后对其进行总结。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的并发工具类</title>
      <link>http://localhost:1313/2020/04/21/Java-Concurrent-Tool-Class/</link>
      <pubDate>Tue, 21 Apr 2020 18:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/21/Java-Concurrent-Tool-Class/</guid>
      <description>&lt;p&gt;在 JDK 1.5 中的 java.util.concurrent 包下，有一些在并发情况下控制线程的工具类，有的可以控制并发流程，而有的可以交换线程之间的数据。通过这些辅助类可以更好的帮助我们进行并发编程，而本文主要介绍 CountDownLatch、CyclicBarrier、Semaphore、Exchanger 这四个并发工具类。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的阻塞队列</title>
      <link>http://localhost:1313/2020/04/16/Java-BlockingQueue/</link>
      <pubDate>Thu, 16 Apr 2020 16:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/16/Java-BlockingQueue/</guid>
      <description>&lt;p&gt;在之前的《&lt;a href=&#34;https://dyfloveslife.github.io/2020/04/14/Java-ThreadPool/&#34;&gt;Java 中的线程池&lt;/a&gt;》一文中，在介绍线程池参数的时候，其中&lt;code&gt;BlockingQueue&amp;lt;Runnable&amp;gt; workQueue&lt;/code&gt;用于存储等待执行的任务，提到了几种不同类型的等待队列。本文将详细的介绍阻塞队列的实现原理以及各自的使用方法。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>