<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrent on Carol&#39;s blog</title>
    <link>http://localhost:1313/tags/Concurrent/</link>
    <description>Recent content in Concurrent on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Apr 2020 22:10:11 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/Concurrent/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>线程间的通信机制</title>
      <link>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</link>
      <pubDate>Tue, 07 Apr 2020 22:10:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</guid>
      <description>之前的文章，比如 synchronized 和 [Lock]()</description>
    </item>
    
    <item>
      <title>Java 中的 Lock 及各种锁的概念</title>
      <link>http://localhost:1313/2020/04/05/Java-Lock/</link>
      <pubDate>Sun, 05 Apr 2020 18:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Lock/</guid>
      <description>&lt;p&gt;上节 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;《Java 中的 synchronized》&lt;/a&gt;介绍了能够在多线程访问临界资源的情况下，使用 synchronized 关键字可以保证线程之间的顺序执行（序列化访问临界资源），即同一时刻只能由一个线程获得当前对象的锁。可以看到 synchronized 是在 JVM 层面实现了对临界资源的同步互斥访问，但锁的粒度较大。本文将介绍并发包下的 Lock 接口，同样也可以实现锁的功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 synchronized</title>
      <link>http://localhost:1313/2020/04/05/Java-Synchronized/</link>
      <pubDate>Sun, 05 Apr 2020 14:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Synchronized/</guid>
      <description>&lt;p&gt;在多线程并发的情况下，多线程同时访问的资源叫做临界资源（如变量、对象、文件等），当多个线程同时访问对象并要求操作相同资源时，其操作可能存在数据不一致或数据不完整的情况。为了避免这种情况的发生，需要采取同步互斥机制，以确保在某一时刻，方法内只允许一个线程对该资源进行操作，而其它线程只能等待。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 volatile</title>
      <link>http://localhost:1313/2020/03/16/Java-volatile/</link>
      <pubDate>Mon, 16 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/16/Java-volatile/</guid>
      <description>&lt;p&gt;volatile 是轻量级的 synchronized，其在多处理器中保证了共享变量的&lt;code&gt;可见性&lt;/code&gt;，即当一个线程修改一个共享变量时，另一个线程会读到这个修改的值。但 volatile 不能保证&lt;code&gt;原子性&lt;/code&gt;（例如自增操作），详细的说明将会在下文进行展开。保证并发程序正确执行还需要做到&lt;code&gt;有序性&lt;/code&gt;，满足以上三个原则，才能够正确的执行并发程序。而本文将对 volatile 关键字进行详细解释，结合具体例子的同时说明 volatile 关键字的使用场景。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>