<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrent on Carol&#39;s blog</title>
    <link>http://localhost:1313/tags/Concurrent/</link>
    <description>Recent content in Concurrent on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Carol</copyright>
    <lastBuildDate>Thu, 07 May 2020 15:35:11 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/Concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 中的 ReentrantLock</title>
      <link>http://localhost:1313/2020/05/07/Java-ReentrantLock/</link>
      <pubDate>Thu, 07 May 2020 15:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/07/Java-ReentrantLock/</guid>
      <description>&lt;p&gt;上篇文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/05/01/Java-AQS/&#34;&gt;《Java 中的 AQS》&lt;/a&gt; 对 AbstractQueuedSynchronizer 中的方法及实现方式做了详细的解释。有了 AQS 和 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/29/Java-Atomic/#cas&#34;&gt;CAS&lt;/a&gt; 的基础以后，我们再来分析 ReentrantLock 就会更加容易一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 AQS</title>
      <link>http://localhost:1313/2020/05/01/Java-AQS/</link>
      <pubDate>Fri, 01 May 2020 11:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/01/Java-AQS/</guid>
      <description>&lt;p&gt;之前的&lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Lock/&#34;&gt;《Java 中的 Lock 及各种锁的概念》&lt;/a&gt;简单介绍了 Lock 的使用以及 Lock 的唯一实现类 ReentrantLock 中的方法。我们一般会拿 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;synchronized&lt;/a&gt; 和 ReentrantLock 做比较。而在了解 ReentrantLock 之前需要理解 AQS 的实现。因此，本文分析了 AQS 中主要的源码，包括独占模式与共享模式，为更好的认识 ReentrantLock 打下基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的线程池</title>
      <link>http://localhost:1313/2020/04/14/Java-ThreadPool/</link>
      <pubDate>Tue, 14 Apr 2020 13:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/14/Java-ThreadPool/</guid>
      <description>&lt;p&gt;在多线程并发的环境下创建多个线程去执行任务，每当有一个任务到来的时候都需要创建一个线程去执行。这种方式虽然是可行的，但如果线程并发的数量很多，并且每个线程都是执行一个时间很短的任务就结束掉了，这样频繁的创建线程就会大大降低系统的运行效率，因为频繁的创建和销毁线程需要消耗额外的时间。对于这种情况，我们可以使用线程池技术让线程达到复用的目的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 ThreadLocal</title>
      <link>http://localhost:1313/2020/04/13/Java-ThreadLocal/</link>
      <pubDate>Mon, 13 Apr 2020 15:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/13/Java-ThreadLocal/</guid>
      <description>&lt;p&gt;使用 Java 中的 ThreadLocal 类可以创建只能由同一个线程读写的变量。也就是说，即使两个线程在执行相同的代码，并且代码中都有对同一个 ThreadLocal 变量的引用，那么这两个线程也不会看到对方的 ThreadLocal 变量。因此，Java 中的 ThreadLocal 类提供了一种简单的方式来使代码中的线程变得更加安全。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线程间的通信机制</title>
      <link>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</link>
      <pubDate>Tue, 07 Apr 2020 22:10:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/07/Java-Inter-thread-communication/</guid>
      <description>&lt;p&gt;之前的文章，比如在多线程环境中使用 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;synchronized&lt;/a&gt; 和 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Lock/&#34;&gt;Lock&lt;/a&gt; 可以通过锁的方式实现线程之间的同步互斥访问临界资源。也就是说，只有当一个线程释放了锁之后，另一个线程才能获得锁，从而对数据进行操作。但在有些情况下，需要多个线程之间进行协作，以使得多个线程可以一起去解决某个问题，此时就需要采用线程通信-协作机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Lock 及各种锁的概念</title>
      <link>http://localhost:1313/2020/04/05/Java-Lock/</link>
      <pubDate>Sun, 05 Apr 2020 18:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Lock/</guid>
      <description>&lt;p&gt;上节 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;《Java 中的 synchronized》&lt;/a&gt;介绍了能够在多线程访问临界资源的情况下，使用 synchronized 关键字可以保证线程之间的顺序执行（序列化访问临界资源），即同一时刻只能由一个线程获得当前对象的锁。可以看到 synchronized 是在 JVM 层面实现了对临界资源的同步互斥访问，但锁的粒度较大。本文将介绍并发包下的 Lock 接口，同样也可以实现锁的功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 synchronized</title>
      <link>http://localhost:1313/2020/04/05/Java-Synchronized/</link>
      <pubDate>Sun, 05 Apr 2020 14:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Synchronized/</guid>
      <description>&lt;p&gt;在多线程并发的情况下，多线程同时访问的资源叫做临界资源（如变量、对象、文件等），当多个线程同时访问对象并要求操作相同资源时，其操作可能存在数据不一致或数据不完整的情况。为了避免这种情况的发生，需要采取同步互斥机制，以确保在某一时刻，方法内只允许一个线程对该资源进行操作，而其它线程只能等待。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 volatile</title>
      <link>http://localhost:1313/2020/03/16/Java-volatile/</link>
      <pubDate>Mon, 16 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/16/Java-volatile/</guid>
      <description>&lt;p&gt;volatile 是轻量级的 synchronized，其在多处理器中保证了共享变量的&lt;code&gt;可见性&lt;/code&gt;，即当一个线程修改一个共享变量时，另一个线程会读到这个修改的值。但 volatile 不能保证&lt;code&gt;原子性&lt;/code&gt;（例如自增操作），详细的说明将会在下文进行展开。保证并发程序正确执行还需要做到&lt;code&gt;有序性&lt;/code&gt;，满足以上三个原则，才能够正确的执行并发程序。而本文将对 volatile 关键字进行详细解释，结合具体例子的同时说明 volatile 关键字的使用场景。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
