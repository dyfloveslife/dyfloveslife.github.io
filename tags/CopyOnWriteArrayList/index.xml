<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CopyOnWriteArrayList on Carol&#39;s blog</title>
    <link>http://localhost:1313/tags/CopyOnWriteArrayList/</link>
    <description>Recent content in CopyOnWriteArrayList on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Carol</copyright>
    <lastBuildDate>Mon, 27 Apr 2020 15:02:11 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/CopyOnWriteArrayList/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 中的 CopyOnWrite 容器</title>
      <link>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</link>
      <pubDate>Mon, 27 Apr 2020 15:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/27/Java-CopyOnWrite/</guid>
      <description>&lt;p&gt;在某些&lt;code&gt;读多写少&lt;/code&gt;的多线程环境下，基于 CopyOnWrite 思想的 CopyOnWriteArrayList 容器和 CopyOnWriteArraySet 容器可以保证线程安全，能够确保读操作和写操作之间不会被阻塞。本文将会从 线程不安全的 ArrayList 入手，由 CopyOnWrite 思想引申到 CopyOnWriteArrayList，通过示例说明它是怎么保证线程安全的，适用的场景，最后对其进行总结。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>