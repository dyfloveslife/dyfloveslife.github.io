<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HashMap on Carol&#39;s blog</title>
    <link>http://localhost:1313/tags/HashMap/</link>
    <description>Recent content in HashMap on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Carol</copyright>
    <lastBuildDate>Tue, 24 Mar 2020 14:02:11 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/HashMap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 容器之 ConcurrentHashMap</title>
      <link>http://localhost:1313/2020/03/24/JavaSrc-ConcurrentHashMap/</link>
      <pubDate>Tue, 24 Mar 2020 14:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/24/JavaSrc-ConcurrentHashMap/</guid>
      <description>&lt;p&gt;ConcurrentHashMap 是 HashMap 的一个线程安全并且支持高并发的版本，之前的文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/02/12/JavaSrc-HashMap/&#34;&gt;《Java 容器之 HashMap》&lt;/a&gt;从 HashMap 的实现原理到各个方法的使用，以及每个方法各自的具体实现都分别进行了介绍，并将 JDK1.7 与 JDK1.8 中的 HashMap 进行了对比。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashTable</title>
      <link>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</link>
      <pubDate>Wed, 11 Mar 2020 19:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</guid>
      <description>&lt;p&gt;前文对 JDK1.8 中的 &lt;a href=&#34;https://dyfloveslife.github.io/2020/02/12/JavaSrc-HashMap/&#34;&gt;HashMap&lt;/a&gt; 的在原理实现以及相关操作进行了说明，介绍了基于&lt;code&gt;数组（Node）+链表（尾插）+红黑树&lt;/code&gt;的数据结构，以及&lt;code&gt;resize()&lt;/code&gt;的过程。而本文将介绍与 HashMap 较为相似的&lt;code&gt;HashTable&lt;/code&gt;，同样也是基于&lt;code&gt;数组（Entry）+链表&lt;/code&gt;实现的，但&lt;code&gt;HashTable&lt;/code&gt;是线程同步的（synchroinzed），在某些方面又有一些区别，下面将分别介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashMap</title>
      <link>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</link>
      <pubDate>Wed, 12 Feb 2020 17:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</guid>
      <description>&lt;p&gt;HapMap 中的 get 和 put 方法在 O(1) 的时间内即可完成，如此快速存取方式到底是怎么实现的？本文将对 HashMap 中的主要方法（get、put、resize）进行说明，对应的版本为 JDK 1.8。不过，为了更加详细的了解 HashMap 的优化过程，同时也会与 JDK 1.7 中的 HashMap 进行比较，从而对 HashMap 有一个较为全面的认识。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
