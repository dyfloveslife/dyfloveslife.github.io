<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Carol&#39;s blog</title>
    <link>http://localhost:1313/tags/Java/</link>
    <description>Recent content in Java on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Mar 2020 17:04:11 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/Java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 中的序列化和反序列化</title>
      <link>http://localhost:1313/2020/03/21/Serialization-and-Deserialization-in-Java/</link>
      <pubDate>Sat, 21 Mar 2020 17:04:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/21/Serialization-and-Deserialization-in-Java/</guid>
      <description>&lt;p&gt;当在 Java 中创建对象的时候，只要我们需要这个对象，它就会一直存在。但是一旦程序终止，它们也就不复存在了。如果我们想让对象能够在程序不运行的状态下仍然能够保存它们的信息，那就需要用到&lt;code&gt;序列化机制&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Thread</title>
      <link>http://localhost:1313/2020/03/17/JavaSrc-Thread/</link>
      <pubDate>Tue, 17 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/17/JavaSrc-Thread/</guid>
      <description>&lt;p&gt;本文主要介绍 Thread 类中线程的六种状态以及各状态之间转换的方法，如 wait()、start()、run()、sleep() 等。在阐述线程的生命周期的同时，解释各个方法是如何使线程的状态进行转换的，以及在转换的过程中是否需要释放锁等问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 volatile</title>
      <link>http://localhost:1313/2020/03/16/Java-volatile/</link>
      <pubDate>Mon, 16 Mar 2020 16:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/16/Java-volatile/</guid>
      <description>&lt;p&gt;volatile 是轻量级的 synchronized，其在多处理器中保证了共享变量的&lt;code&gt;可见性&lt;/code&gt;，即当一个线程修改一个共享变量时，另一个线程会读到这个修改的值。但 volatile 不能保证&lt;code&gt;原子性&lt;/code&gt;（例如自增操作），详细的说明将会在下文进行展开。保证并发程序正确执行还需要做到&lt;code&gt;有序性&lt;/code&gt;，满足以上三个原则，才能够正确的执行并发程序。而本文将对 volatile 关键字进行详细解释，结合具体例子的同时说明 volatile 关键字的使用场景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashTable</title>
      <link>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</link>
      <pubDate>Wed, 11 Mar 2020 19:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/11/JavaSrc-HashTable/</guid>
      <description>&lt;p&gt;前文对 JDK1.8 中的 &lt;a href=&#34;https://dyfloveslife.github.io/2020/02/12/JavaSrc-HashMap/&#34;&gt;HashMap&lt;/a&gt; 的在原理实现以及相关操作进行了说明，介绍了基于&lt;code&gt;数组（Node）+链表（尾插）+红黑树&lt;/code&gt;的数据结构，以及&lt;code&gt;resize()&lt;/code&gt;的过程。而本文将介绍与 HashMap 较为相似的&lt;code&gt;HashTable&lt;/code&gt;，同样也是基于&lt;code&gt;数组（Entry）+链表&lt;/code&gt;实现的，同样也是线程同步的（synchroinzed），在某些方面又有一些区别，下面将分别介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 LinkedHashMap</title>
      <link>http://localhost:1313/2020/03/10/JavaSrc-LinkedHashMap/</link>
      <pubDate>Tue, 10 Mar 2020 15:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/10/JavaSrc-LinkedHashMap/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 LinkedHashMap 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 LinkedList</title>
      <link>http://localhost:1313/2020/03/07/JavaSrc-LinkedList/</link>
      <pubDate>Sat, 07 Mar 2020 19:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/07/JavaSrc-LinkedList/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 LinkedList 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之集合类 ArrayList</title>
      <link>http://localhost:1313/2020/03/04/JavaSrc-ArrayList/</link>
      <pubDate>Wed, 04 Mar 2020 15:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/03/04/JavaSrc-ArrayList/</guid>
      <description>&lt;p&gt;本文是对 JDK1.8 中 ArrayList 的分析与总结，在阅读源码的同时加深对其提供的方法的使用，以便更好的理解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 单例模式[备忘]</title>
      <link>http://localhost:1313/2020/02/17/Singleton-pattern-in-java/</link>
      <pubDate>Mon, 17 Feb 2020 11:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/17/Singleton-pattern-in-java/</guid>
      <description>&lt;p&gt;很久没有复习单例模式了，今天做一个笔记，对 Java 中的单例模式做一个总结，以做备忘。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 容器之 HashMap</title>
      <link>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</link>
      <pubDate>Wed, 12 Feb 2020 17:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/12/JavaSrc-HashMap/</guid>
      <description>&lt;p&gt;HapMap 中的 get 和 put 方法在 O(1) 的时间内即可完成，如此快速存取方式到底是怎么实现的？本文将对 HashMap 中的主要方法（get、put、resize）进行说明，对应的版本为 JDK 1.8。不过，为了更加详细的了解 HashMap 的优化过程，同时也会与 JDK 1.7 中的 HashMap 进行比较，从而对 HashMap 有一个较为全面的认识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的对象与引用</title>
      <link>http://localhost:1313/2020/02/01/java-object-and-reference/</link>
      <pubDate>Sat, 01 Feb 2020 19:00:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/02/01/java-object-and-reference/</guid>
      <description>&lt;p&gt;更好的理解 Java 中的 &lt;code&gt;对象&lt;/code&gt; 和 &lt;code&gt;引用&lt;/code&gt; 是面向对象技术的前提，本文旨在讨论如何理解它们的含义以及它们之间的关系。如有错误，还请指出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Exception 和 Error</title>
      <link>http://localhost:1313/2020/01/21/JavaCore-difference-between-exception-and-error/</link>
      <pubDate>Tue, 21 Jan 2020 11:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/01/21/JavaCore-difference-between-exception-and-error/</guid>
      <description>&lt;p&gt;程序的异常处理在开发中很是常见，只有正确处理好意外情况，才能保证程序的可靠性。本文通过 Java 异常处理机制，详细的分析与解释 Java 中的 Exception 与 Error 之间的区别以及需要注意的点，以便更好的实现程序的可维护性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何理解 Java?</title>
      <link>http://localhost:1313/2020/01/21/JavaCore-understand-java/</link>
      <pubDate>Tue, 21 Jan 2020 10:09:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/01/21/JavaCore-understand-java/</guid>
      <description>&lt;p&gt;“一次编译，到处执行” 又能体现 Java 的哪些思想？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之基础类 Integer</title>
      <link>http://localhost:1313/2019/12/13/JavaSrc-BasicClass-Integer/</link>
      <pubDate>Fri, 13 Dec 2019 21:20:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/13/JavaSrc-BasicClass-Integer/</guid>
      <description>&lt;p&gt;本片文章主要介绍 Integer 类中一些比较常用的方法，并分析该类在 Java 中的作用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK 源码之基础类 Object</title>
      <link>http://localhost:1313/2019/12/04/JavaSrc-BasicClass-Object/</link>
      <pubDate>Wed, 04 Dec 2019 18:02:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2019/12/04/JavaSrc-BasicClass-Object/</guid>
      <description>&lt;p&gt;主要介绍 Java 中 Object 类的常见方法，通过阅读源码的方式加深对各种方法的理解。如有错误，欢迎在评论中和我一起讨论交流。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>