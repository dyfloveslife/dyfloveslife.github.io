<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lock on Carol&#39;s blog</title>
    <link>http://localhost:1313/tags/Lock/</link>
    <description>Recent content in Lock on Carol&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 07 May 2020 15:35:11 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/Lock/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 中的 ReentrantLock</title>
      <link>http://localhost:1313/2020/05/07/Java-ReentrantLock/</link>
      <pubDate>Thu, 07 May 2020 15:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/07/Java-ReentrantLock/</guid>
      <description>&lt;p&gt;上篇文章&lt;a href=&#34;https://dyfloveslife.github.io/2020/05/01/Java-AQS/&#34;&gt;《Java 中的 AQS》&lt;/a&gt; 对 AbstractQueuedSynchronizer 中的方法及实现方式做了详细的解释。有了 AQS 和 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/29/Java-Atomic/#cas&#34;&gt;CAS&lt;/a&gt; 的基础以后，我们再来分析 ReentrantLock 就会更加容易一些。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 AQS</title>
      <link>http://localhost:1313/2020/05/01/Java-AQS/</link>
      <pubDate>Fri, 01 May 2020 11:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/05/01/Java-AQS/</guid>
      <description>&lt;p&gt;之前的&lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Lock/&#34;&gt;《Java 中的 Lock 及各种锁的概念》&lt;/a&gt;简单介绍了 Lock 的使用以及 Lock 的唯一实现类 ReentrantLock 中的方法。我们一般会拿 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;synchronized&lt;/a&gt; 和 ReentrantLock 做比较。而在了解 ReentrantLock 之前需要理解 AQS 的实现。因此，本文分析了 AQS 中主要的源码，包括独占模式与共享模式，为更好的认识 ReentrantLock 打下基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 中的 Lock 及各种锁的概念</title>
      <link>http://localhost:1313/2020/04/05/Java-Lock/</link>
      <pubDate>Sun, 05 Apr 2020 18:35:11 +0800</pubDate>
      
      <guid>http://localhost:1313/2020/04/05/Java-Lock/</guid>
      <description>&lt;p&gt;上节 &lt;a href=&#34;https://dyfloveslife.github.io/2020/04/05/Java-Synchronized/&#34;&gt;《Java 中的 synchronized》&lt;/a&gt;介绍了能够在多线程访问临界资源的情况下，使用 synchronized 关键字可以保证线程之间的顺序执行（序列化访问临界资源），即同一时刻只能由一个线程获得当前对象的锁。可以看到 synchronized 是在 JVM 层面实现了对临界资源的同步互斥访问，但锁的粒度较大。本文将介绍并发包下的 Lock 接口，同样也可以实现锁的功能。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>